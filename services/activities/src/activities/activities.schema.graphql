type Activity @key(fields: "id") {
  id: ID!
  name: String
  registerable: Boolean
  organization_id: Int
  created_at: String
  updated_at: String
  steps: Int
  fee: Int
  email_footer: String
  terms_and_conditions: String
  kind: String
  lead_in_message: String
  no_cut: Boolean
  current_season: String
  discounted_fee: Int
  spirit_wear_link: String
  athletic_season: String
  rosterwebservice_access: Boolean
  archived: Boolean

  ActivityLegalForms: [ActivityLegalForm]
  CustomDiscounts: [CustomDiscount]
  Events: [Event]
  Groups: [Group]
  Messages: [Message]
  ParticipantInformationConfigurations: [ParticipantInformationConfiguration]
  Registrations: [Registration]
  Settlements: [Settlement]
  Ventures: [Venture]
  # Organization: Organization
}

input ActivityInput {
  name: String!
  registerable: Boolean!
  organization_id: Int
  steps: Int!
  fee: Int
  email_footer: String
  terms_and_conditions: String
  kind: String
  lead_in_message: String
  no_cut: Boolean!
  current_season: String!
  discounted_fee: Int
  spirit_wear_link: String
  athletic_season: String!
  rosterwebservice_access: Boolean!
  archived: Boolean!
}

extend type Query {
  activities: [Activity]
  activity(id: ID!): Activity
}

extend type Mutation {
  activityCreate(input: ActivityInput): Activity
  activityUpdate(id: ID!, updates: ActivityInput): Activity
}
